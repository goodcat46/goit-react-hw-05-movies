{"version":3,"file":"static/js/557.5240199a.chunk.js","mappings":"sPAGMA,EAAgB,mCAAG,WAAOC,GAAP,uFACJC,EAAAA,EAAAA,IAAA,iBAA4BD,EAA5B,YAA+C,CAChEE,OAAQ,CACNC,QAASC,EAAAA,KAHU,cACjBC,EADiB,yBAMhBA,EAAKA,KAAKC,MANM,2CAAH,sDAStB,I,iBCXA,GAAgB,KAAO,oB,SCuDvB,EAjDa,WACX,OAAgCC,EAAAA,EAAAA,UAAS,IAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACQT,GAAYU,EAAAA,EAAAA,MAAZV,QAEFW,EAAqB,mCAAG,6GAEHZ,EAAiBC,GAFd,OAEpBY,EAFoB,OAG1BH,EAAYG,GAHc,gDAK1BC,QAAQC,IAAR,MAL0B,yDAAH,qDAc3B,OALAC,EAAAA,EAAAA,YAAU,WACRJ,GAED,GAAE,IAEqB,IAApBH,EAASQ,QACJ,oDAGP,eAAIC,UAAWC,EAAAA,KAAf,SACGV,EAASW,KAAI,SAAAC,GACZ,IAAQC,EAAsCD,EAAtCC,GAAIC,EAAkCF,EAAlCE,KAAMC,EAA4BH,EAA5BG,UAAWC,EAAiBJ,EAAjBI,aAC7B,OACE,yBACE,iBAAKP,UAAWC,EAAAA,SAAhB,WACE,gBAAKD,UAAWC,EAAAA,QAAhB,UACE,gBACED,UAAWC,EAAAA,IACXO,IACED,EAAY,yCAC0BA,GAClCE,EAENC,IAAI,gBAGR,uBAAIL,KACJ,uCAAeC,SAdVF,EAkBZ,KAGN,C","sources":["api/fetchCast.js","webpack://react-homework-template/./src/components/Cast/Cast.module.css?c9ee","components/Cast/Cast.jsx"],"sourcesContent":["import fetchMovieApi from './moviesApi';\nimport { API_KEY } from './API_KEY';\n\nconst getFetchCastById = async (movieId) => {\n  const data = await fetchMovieApi.get(`/movie/${movieId}/credits`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return data.data.cast;\n};\n\nexport default getFetchCastById;","// extracted by mini-css-extract-plugin\nexport default {\"cast\":\"Cast_cast__m5y0R\"};","import React, { useEffect, useState } from 'react';\nimport getFetchCastById from 'api/fetchCast';\nimport placeholderImg from '../../img/placeholderImg.webp';\nimport { useParams } from 'react-router-dom';\n\nimport css from './Cast.module.css';\n\nconst Cast = () => {\n  const [castList, setCastList] = useState([]);\n  const { movieId } = useParams();\n\n  const getFetchMovieCastById = async () => {\n    try {\n      const response = await getFetchCastById(movieId);\n      setCastList(response);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    getFetchMovieCastById();\n    // eslint-disable-next-line\n  }, []);\n\n  if (castList.length === 0) {\n    return <p>No casts for this movie</p>;\n  }\n  return (\n    <ul className={css.cast}>\n      {castList.map(el => {\n        const { id, name, character, profile_path } = el;\n        return (\n          <li key={id}>\n            <div className={css.cardWrap}>\n              <div className={css.imgWrap}>\n                <img\n                  className={css.img}\n                  src={\n                    profile_path\n                      ? `https://image.tmdb.org/t/p/w500${profile_path}`\n                      : placeholderImg\n                  }\n                  alt=\"portrait\"\n                />\n              </div>\n              <p>{name}</p>\n              <p>Character: {character}</p>\n            </div>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default Cast;\n"],"names":["getFetchCastById","movieId","fetchMovieApi","params","api_key","API_KEY","data","cast","useState","castList","setCastList","useParams","getFetchMovieCastById","response","console","log","useEffect","length","className","css","map","el","id","name","character","profile_path","src","placeholderImg","alt"],"sourceRoot":""}